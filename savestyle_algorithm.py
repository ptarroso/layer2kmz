# -*- coding: utf-8 -*-

"""
/***************************************************************************
                                   Layer2KMZ
                                 A QGIS plugin
        Build a kmz from a layer of spatial points, lines or polygons

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-02-02
        copyright            : (C) 2018 by Pedro Tarroso
        email                : ptarroso@cibio.up.pt
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Pedro Tarroso'
__date__ = '2020-05-12'
__copyright__ = '(C) 2018 by Pedro Tarroso'
__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from PyQt5.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFileDestination)

class saveStyleAlgorithm(QgsProcessingAlgorithm):

    fromLayer  = 'fromLayer'
    outStyle = 'outStyle'

    def initAlgorithm(self, config):

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.fromLayer,
                self.tr('Save style from'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.outStyle,
                self.tr('Output QML'),
                fileFilter="*.qml"
            )
        )

    def processAlgorithm(self, parameters, context, feedback):

        fromLyr = self.parameterAsLayer(
            parameters,
            self.fromLayer,
            context
        )

        if fromLyr is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.inLayer))

        outFile = self.parameterAsFileOutput(
            parameters,
            self.outStyle,
            context
        )

        if outFile is None:
            raise QgsProcessingException("Invalid destination")

        # Make sure output file extension is QML
        if outFile[-4:].lower() != ".qml":
            outFile = outFile + ".qml"

        # Get layer style and write to file
        fromLyr.saveNamedStyle(outFile)

        return {self.outStyle: outFile}

    def name(self):
        """
        Returns the algorithm name, used for idenQgsProcessingParameterNumbertifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'savestyle'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("Save layer style")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr("Vector style")

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'vectorstyle'

    def icon(self):
        return QIcon(":/plugins/layer2kmz/icon_savestyle.png")

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return saveStyleAlgorithm()
