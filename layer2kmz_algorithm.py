# -*- coding: utf-8 -*-

"""
/***************************************************************************
                                   Layer2KMZ
                                 A QGIS plugin
        Build a kmz from a layer of spatial points, lines or polygons

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-02-02
        copyright            : (C) 2018 by Pedro Tarroso
        email                : ptarroso@cibio.up.pt
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Pedro Tarroso'
__date__ = '2020-05-12'
__copyright__ = '(C) 2018 by Pedro Tarroso'
__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from PyQt5.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingParameterExpression,
                       QgsProcessingParameterField,
                       QgsProcessingParameterBoolean)

# import kml process
from .layer2kmz_process import kmlprocess

class layer2kmzAlgorithm(QgsProcessingAlgorithm):

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    VectorLayer  = 'VectorLayer'
    LabelField   = 'LabelField'
    FolderField  = 'FolderField'
    ExportFields = 'ExportFields'
    OutputKMZ    = 'OutputKMZ'
    ShowLabels   = 'ShowLabels'

    def initAlgorithm(self, config):

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.VectorLayer,
                self.tr('Vector layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.LabelField,
                self.tr('Label field'),
                parentLayerParameterName=self.VectorLayer
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FolderField,
                self.tr('Folder field'),
                parentLayerParameterName=self.VectorLayer
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.ExportFields,
                self.tr('Select fields to export'),
                parentLayerParameterName=self.VectorLayer,
                allowMultiple=True
            )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(
                self.ShowLabels,
                self.tr('Show labels?'),
                defaultValue=True
            )
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.OutputKMZ,
                self.tr('Output KMZ'),
                fileFilter="*.kmz"
            )
        )



    def processAlgorithm(self, parameters, context, feedback):
        layer = self.parameterAsLayer(parameters, self.VectorLayer, context)
        labelFld = self.parameterAsString(parameters, self.LabelField, context)
        folderFld = self.parameterAsString(parameters, self.FolderField, context)
        exportFld = self.parameterAsFields(parameters, self.ExportFields, context)
        showLbl = self.parameterAsBool(parameters, self.ShowLabels, context)
        outFile = self.parameterAsFileOutput(parameters, self.OutputKMZ, context)

        # Make sure output file extension is KMZ
        if outFile[-4:].lower() != ".kmz":
            outFile = outFile + ".kmz"

        def emitMsg(type, msg):
            """
            Small wrapper to facilitate message emission ignoring extra arguments
            """
            if type == "error":
                feedback.reportError(msg)
            elif type == "warning":
                feedback.pushInfo(msg)

        if outFile == "":
            feedback.pushInfo("Choose an output kmz file!")
        elif exportFld== []:
            feedback.pushInfo("At least one field to export must be selected.")
        else:
            kmlproc = kmlprocess(layer, labelFld, folderFld, exportFld,
                                 showLbl, outFile, feedback.setProgress,
                                 emitMsg)
            kmlproc.process()

        return {self.OutputKMZ: outFile}

    def name(self):
        """
        Returns the algorithm name, used for idenQgsProcessingParameterNumbertifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'layer2kmz'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("Layer to KMZ")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr("Vector conversion")

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'vectorconversion'

    def icon(self):
        return QIcon(":/plugins/layer2kmz/icon.png")

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return layer2kmzAlgorithm()
